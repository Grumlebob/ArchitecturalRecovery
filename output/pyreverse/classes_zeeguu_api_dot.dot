digraph "classes_zeeguu_api_dot" {
rankdir=BT
charset="utf-8"
"api.zeeguu.core.model.article.Article" [color="black", fontcolor="black", label=<{Article|MINIMUM_WORD_COUNT : int<br ALIGN="LEFT"/>authors<br ALIGN="LEFT"/>broken<br ALIGN="LEFT"/>content<br ALIGN="LEFT"/>deleted<br ALIGN="LEFT"/>feed<br ALIGN="LEFT"/>feed_id<br ALIGN="LEFT"/>fk_cefr_level : NoneType<br ALIGN="LEFT"/>fk_difficulty<br ALIGN="LEFT"/>htmlContent<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>img_url<br ALIGN="LEFT"/>img_url_id<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>published_time<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>source_id<br ALIGN="LEFT"/>summary<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>topics<br ALIGN="LEFT"/>uploader<br ALIGN="LEFT"/>uploader_id<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>url_id<br ALIGN="LEFT"/>url_keywords<br ALIGN="LEFT"/>userFound : int<br ALIGN="LEFT"/>video<br ALIGN="LEFT"/>word_count<br ALIGN="LEFT"/>|add_or_replace_topic(topic, session, origin_type: TopicOriginType)<br ALIGN="LEFT"/>add_search(search)<br ALIGN="LEFT"/>add_topic_if_doesnt_exist(topic, session, origin_type: TopicOriginType)<br ALIGN="LEFT"/>add_topics_from_url_keyword(topics, session)<br ALIGN="LEFT"/>add_url_keyword(url_keyword, rank, session)<br ALIGN="LEFT"/>all_older_than(days)<br ALIGN="LEFT"/>all_younger_than(days)<br ALIGN="LEFT"/>article_info(with_content)<br ALIGN="LEFT"/>article_info_for_teacher()<br ALIGN="LEFT"/>contains_any_of(keywords: list)<br ALIGN="LEFT"/>create_article_fragments(session)<br ALIGN="LEFT"/>create_clone(session, source, uploader)<br ALIGN="LEFT"/>create_from_upload(session, title, content, htmlContent, uploader, language)<br ALIGN="LEFT"/>exists(article)<br ALIGN="LEFT"/>find(url: str)<br ALIGN="LEFT"/>find_by_id(id: int)<br ALIGN="LEFT"/>find_or_create(session, url: str, html_content, title, authors: str)<br ALIGN="LEFT"/>get_broken()<br ALIGN="LEFT"/>get_content()<br ALIGN="LEFT"/>get_fk_difficulty()<br ALIGN="LEFT"/>get_word_count()<br ALIGN="LEFT"/>is_owned_by(user)<br ALIGN="LEFT"/>mark_as_low_quality_and_remove_from_index()<br ALIGN="LEFT"/>own_texts_for_user(user, ignore_deleted)<br ALIGN="LEFT"/>recalculate_topics_from_url_keywords(session)<br ALIGN="LEFT"/>remove_search(search)<br ALIGN="LEFT"/>set_as_broken(session, broken_code)<br ALIGN="LEFT"/>set_url_keywords(url_keywords, session)<br ALIGN="LEFT"/>star_for_user(session, user, state)<br ALIGN="LEFT"/>topics_as_string()<br ALIGN="LEFT"/>topics_as_tuple()<br ALIGN="LEFT"/>update(db_session, language, content, htmlContent, title)<br ALIGN="LEFT"/>update_content(session, content, commit)<br ALIGN="LEFT"/>uploaded_by(uploader_id: int)<br ALIGN="LEFT"/>vote_broken()<br ALIGN="LEFT"/>with_title_containing(needle)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_broken_code_map.ArticleBrokenMap" [color="black", fontcolor="black", label=<{ArticleBrokenMap|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>broken_code<br ALIGN="LEFT"/>|find_or_create(session, article, broken_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_difficulty_feedback.ArticleDifficultyFeedback" [color="black", fontcolor="black", label=<{ArticleDifficultyFeedback|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>difficulty_feedback<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|find(user: User, article: Article)<br ALIGN="LEFT"/>find_or_create(session, user: User, article: Article, date: datetime, difficulty)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_fragment.ArticleFragment" [color="black", fontcolor="black", label=<{ArticleFragment|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>formatting<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>order<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>text_id<br ALIGN="LEFT"/>|find_by_article_order(article_id: int, order: int)<br ALIGN="LEFT"/>find_by_id(id: int)<br ALIGN="LEFT"/>find_or_create(session, article, text: str, order: int, formatting: str, commit)<br ALIGN="LEFT"/>get_all_article_fragments_in_order(article_id: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_fragment_context.ArticleFragmentContext" [color="black", fontcolor="black", label=<{ArticleFragmentContext|article_fragment<br ALIGN="LEFT"/>article_fragment_id<br ALIGN="LEFT"/>bookmark<br ALIGN="LEFT"/>bookmark_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|find_by_bookmark(bookmark)<br ALIGN="LEFT"/>find_or_create(session, bookmark, article_fragment, commit)<br ALIGN="LEFT"/>get_all_user_bookmarks_for_article_fragment(user_id: int, article_fragment_id: int, as_json_serializable: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.article_rule.ArticleRule" [color="black", fontcolor="black", label=<{ArticleRule|article : Article, NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_article.ArticleTest" [color="black", fontcolor="black", label=<{ArticleTest|article1 : Article, NoneType<br ALIGN="LEFT"/>article2 : Article, NoneType<br ALIGN="LEFT"/>language : Language<br ALIGN="LEFT"/>new_art : Article, NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_topic()<br ALIGN="LEFT"/>test_article_representation_does_not_error()<br ALIGN="LEFT"/>test_articles_are_different()<br ALIGN="LEFT"/>test_find_or_create()<br ALIGN="LEFT"/>test_load_article_without_language_information()<br ALIGN="LEFT"/>test_topic_replacement()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_title_context.ArticleTitleContext" [color="black", fontcolor="black", label=<{ArticleTitleContext|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>bookmark<br ALIGN="LEFT"/>bookmark_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|find_by_bookmark(bookmark)<br ALIGN="LEFT"/>find_or_create(session, bookmark, article, commit)<br ALIGN="LEFT"/>get_all_user_bookmarks_for_article_title(user_id: int, article_id: int, as_json_serializable: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_topic_map.ArticleTopicMap" [color="black", fontcolor="black", label=<{ArticleTopicMap|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>origin_type<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>topic_id<br ALIGN="LEFT"/>|create_if_doesnt_exists(article, topic, origin_type: TopicOriginType)<br ALIGN="LEFT"/>create_or_update(article, topic, origin_type: TopicOriginType)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_topic_user_feedback.ArticleTopicUserFeedback" [color="black", fontcolor="black", label=<{ArticleTopicUserFeedback|DO_NOT_SHOW_FEEDBACK : str<br ALIGN="LEFT"/>article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>feedback<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>topic_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>all_for_user_as_list_w_feedback(user, feedback)<br ALIGN="LEFT"/>find_given_user_article(article: Article, user: User)<br ALIGN="LEFT"/>find_or_create(session, article, user, topic, feedback)<br ALIGN="LEFT"/>with_id(i)<br ALIGN="LEFT"/>with_topic_id(topic_id, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_url_keyword_map.ArticleUrlKeywordMap" [color="black", fontcolor="black", label=<{ArticleUrlKeywordMap|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>rank<br ALIGN="LEFT"/>url_keyword<br ALIGN="LEFT"/>url_keyword_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.nlp_pipeline.automatic_gec_tagging.AutoGECTagging" [color="black", fontcolor="black", label=<{AutoGECTagging|language_pipe : str<br ALIGN="LEFT"/>spacy_pipeline<br ALIGN="LEFT"/>|anottate_clues(word_dictionary_list, original_sentence, verbose)<br ALIGN="LEFT"/>generate_labels(error_sentence, corr_sentence, merge_inserts, include_o_start_end, return_tokens, return_err_pos, return_corr_pos, return_alignment, return_corrections, verbose)<br ALIGN="LEFT"/>word_lemma_token_sim(token_err, token_ref, verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.base_rule.BaseRule" [color="black", fontcolor="black", label=<{BaseRule|faker<br ALIGN="LEFT"/>|save(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.word_scheduling.basicSR.basicSR.BasicSRSchedule" [color="black", fontcolor="black", label=<{BasicSRSchedule|bookmark<br ALIGN="LEFT"/>bookmark_id<br ALIGN="LEFT"/>consecutive_correct_answers<br ALIGN="LEFT"/>cooling_interval<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>next_practice_time<br ALIGN="LEFT"/>|all_bookmarks_priority_to_study(user, limit)<br ALIGN="LEFT"/>bookmarks_in_pipeline(user)<br ALIGN="LEFT"/>bookmarks_to_study(user, required_count)<br ALIGN="LEFT"/>clear_bookmark_schedule(db_session, bookmark)<br ALIGN="LEFT"/>find(bookmark)<br ALIGN="LEFT"/>find_by_bookmark(bookmark)<br ALIGN="LEFT"/><I>find_or_create</I>(db_session, bookmark)<br ALIGN="LEFT"/><I>get_cooling_interval_dictionary</I>()<br ALIGN="LEFT"/>get_end_of_date(date)<br ALIGN="LEFT"/>get_end_of_today()<br ALIGN="LEFT"/><I>get_max_interval</I>()<br ALIGN="LEFT"/>get_scheduled_bookmarks_for_user(user, limit)<br ALIGN="LEFT"/>get_unscheduled_bookmarks_for_user(user, limit)<br ALIGN="LEFT"/>print_schedule_for_user(user_id)<br ALIGN="LEFT"/>priority_scheduled_bookmarks_to_study(user, limit)<br ALIGN="LEFT"/>remove_duplicated_bookmarks(bookmark_list)<br ALIGN="LEFT"/>schedule_for_user(user_id)<br ALIGN="LEFT"/>set_bookmark_as_learned(db_session)<br ALIGN="LEFT"/>there_was_no_need_for_practice_on_date(date: datetime)<br ALIGN="LEFT"/>total_bookmarks_in_pipeline(user): int<br ALIGN="LEFT"/>update(db_session, bookmark, outcome, time: datetime)<br ALIGN="LEFT"/><I>update_schedule</I>(db_session, correctness)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.bookmark.Bookmark" [color="black", fontcolor="black", label=<{Bookmark|bookmark<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>context_id<br ALIGN="LEFT"/>exercise_log<br ALIGN="LEFT"/>fit_for_study<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>learned_time<br ALIGN="LEFT"/>learning_cycle<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>origin<br ALIGN="LEFT"/>origin_id<br ALIGN="LEFT"/>sentence_i<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>source_id<br ALIGN="LEFT"/>starred<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>text_id<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>token_i<br ALIGN="LEFT"/>total_tokens<br ALIGN="LEFT"/>translation<br ALIGN="LEFT"/>translation_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>user_preference<br ALIGN="LEFT"/>|add_new_exercise(exercise)<br ALIGN="LEFT"/>add_new_exercise_result(exercise_source: ExerciseSource, exercise_outcome: ExerciseOutcome, exercise_solving_speed, session_id: int, other_feedback, time: datetime)<br ALIGN="LEFT"/>as_dictionary(with_exercise_info, with_title, with_context, with_context_tokenized)<br ALIGN="LEFT"/>content_is_not_too_long()<br ALIGN="LEFT"/>create_context_mapping(session, context_identifier: ContextIdentifier, commit)<br ALIGN="LEFT"/>exists(bookmark)<br ALIGN="LEFT"/>find(b_id)<br ALIGN="LEFT"/>find_all()<br ALIGN="LEFT"/>find_all_by_user_and_word(user, word)<br ALIGN="LEFT"/>find_all_for_text_and_user(text, user)<br ALIGN="LEFT"/>find_all_for_user_and_article(user, article)<br ALIGN="LEFT"/>find_by_specific_user(user)<br ALIGN="LEFT"/>find_by_user_word_and_text(user, word, text)<br ALIGN="LEFT"/>find_or_create(session, user, _origin: str, _origin_lang: str, _translation: str, _translation_lang: str, _context: str, article_id: int, learning_cycle: int, sentence_i: int, token_i: int, total_tokens: int, c_paragraph_i: int, c_sentence_i: int, c_token_i: int, in_content: bool, left_ellipsis: bool, right_ellipsis: bool, context_identifier: ContextIdentifier, level: int)<br ALIGN="LEFT"/>get_context()<br ALIGN="LEFT"/>get_context_identifier()<br ALIGN="LEFT"/>get_scheduler()<br ALIGN="LEFT"/>is_learned()<br ALIGN="LEFT"/>is_learned_based_on_exercise_outcomes()<br ALIGN="LEFT"/>report_exercise_outcome(exercise_source: str, exercise_outcome: str, solving_speed, session_id, other_feedback, db_session, time: datetime)<br ALIGN="LEFT"/>should_be_studied()<br ALIGN="LEFT"/>sorted_exercise_log()<br ALIGN="LEFT"/>to_json(with_context, with_exercise_info, with_title, with_context_tokenized)<br ALIGN="LEFT"/>translations_rendered_as_text()<br ALIGN="LEFT"/>update_fit_for_study(session)<br ALIGN="LEFT"/>update_learned_status(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.bookmark_context.BookmarkContext" [color="black", fontcolor="black", label=<{BookmarkContext|context_type<br ALIGN="LEFT"/>context_type_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>left_ellipsis<br ALIGN="LEFT"/>right_ellipsis<br ALIGN="LEFT"/>sentence_i<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>text_id<br ALIGN="LEFT"/>token_i<br ALIGN="LEFT"/>|all_bookmarks(user)<br ALIGN="LEFT"/>all_bookmarks_for_context()<br ALIGN="LEFT"/>find_by_id(context_id)<br ALIGN="LEFT"/>find_or_create(session, content, context_type: str, language, sentence_i, token_i, left_ellipsis, right_ellipsis, commit)<br ALIGN="LEFT"/>get_content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.bookmark_rule.BookmarkRule" [color="black", fontcolor="black", label=<{BookmarkRule|bookmark : Bookmark, NoneType, bool<br ALIGN="LEFT"/>props : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_bookmark.BookmarkTest" [color="black", fontcolor="black", label=<{BookmarkTest|user : User<br ALIGN="LEFT"/>user_learning_cycle : User<br ALIGN="LEFT"/>user_rule : UserRule<br ALIGN="LEFT"/>user_rule_cycle : UserRule<br ALIGN="LEFT"/>|find_all_for_user_and_text()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_add_exercise_outcome()<br ALIGN="LEFT"/>test_add_new_exercise()<br ALIGN="LEFT"/>test_add_new_exercise_result()<br ALIGN="LEFT"/>test_bad_quality_bookmark()<br ALIGN="LEFT"/>test_bookmark_is_serializable()<br ALIGN="LEFT"/>test_bookmarks_in_article()<br ALIGN="LEFT"/>test_bookmarks_to_study_is_not_empty()<br ALIGN="LEFT"/>test_empty_exercises_is_not_learned()<br ALIGN="LEFT"/>test_exists()<br ALIGN="LEFT"/>test_find()<br ALIGN="LEFT"/>test_find_all()<br ALIGN="LEFT"/>test_find_all_by_user_and_word()<br ALIGN="LEFT"/>test_find_by_specific_user()<br ALIGN="LEFT"/>test_find_by_user_word_and_text()<br ALIGN="LEFT"/>test_fit_for_study()<br ALIGN="LEFT"/>test_is_learned_based_on_exercise_outcomes_levels()<br ALIGN="LEFT"/>test_is_learned_based_on_exercise_outcomes_productive()<br ALIGN="LEFT"/>test_is_learned_based_on_exercise_outcomes_receptive_not_set()<br ALIGN="LEFT"/>test_is_too_easy_sets_to_learned()<br ALIGN="LEFT"/>test_latest_exercise_outcome()<br ALIGN="LEFT"/>test_text_is_not_too_long()<br ALIGN="LEFT"/>test_top_bookmarks()<br ALIGN="LEFT"/>test_translation()<br ALIGN="LEFT"/>test_user_bookmark_count()<br ALIGN="LEFT"/>test_user_has_bookmarks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.strategies.cognacy_difficulty_estimator.CognacyDifficultyEstimator" [color="black", fontcolor="black", label=<{CognacyDifficultyEstimator|CUSTOM_NAMES : list<br ALIGN="LEFT"/>language : str<br ALIGN="LEFT"/>score_map : dict<br ALIGN="LEFT"/>user : str<br ALIGN="LEFT"/>|cognacyRatio(language: 'model.Language', user: 'model.User')<br ALIGN="LEFT"/>discrete_text_difficulty(median_difficulty: float)<br ALIGN="LEFT"/>estimate_difficulty(text: str)<br ALIGN="LEFT"/>word_difficulty(known_probabilities: dict, personalized: bool, word: Word)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.strategies.cognacy_wh_difficulty_estimator.CognacyWordHistoryDifficultyEstimator" [color="black", fontcolor="black", label=<{CognacyWordHistoryDifficultyEstimator|CUSTOM_NAMES : list<br ALIGN="LEFT"/>language : str<br ALIGN="LEFT"/>score_map : dict<br ALIGN="LEFT"/>user : str<br ALIGN="LEFT"/>|difficulty_until_timestamp(language: 'model.Language', user: 'model.User', max_timestamp, mode, scaling, scaling2)<br ALIGN="LEFT"/>discrete_text_difficulty(median_difficulty: float)<br ALIGN="LEFT"/>estimate_difficulty(text: str)<br ALIGN="LEFT"/>word_difficulty(known_probabilities: dict, personalized: bool, word: Word)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.cohort.Cohort" [color="black", fontcolor="black", label=<{Cohort|declared_level_max<br ALIGN="LEFT"/>declared_level_min<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>inv_code<br ALIGN="LEFT"/>is_cohort_of_teachers<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>max_students<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>users<br ALIGN="LEFT"/>|cohort_still_has_capacity()<br ALIGN="LEFT"/>exists_with_invite_code(code: str)<br ALIGN="LEFT"/>find(id)<br ALIGN="LEFT"/>find_by_code(invite_code)<br ALIGN="LEFT"/>get_cohort_info()<br ALIGN="LEFT"/>get_current_student_count()<br ALIGN="LEFT"/>get_id(inv)<br ALIGN="LEFT"/>get_students()<br ALIGN="LEFT"/>get_teachers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.cohort_article_map.CohortArticleMap" [color="black", fontcolor="black", label=<{CohortArticleMap|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>cohort<br ALIGN="LEFT"/>cohort_id<br ALIGN="LEFT"/>published_time<br ALIGN="LEFT"/>|delete_all_for_article(session, article_id)<br ALIGN="LEFT"/>delete_all_for_cohort(session, cohort_id)<br ALIGN="LEFT"/>find(cohort_id, article_id)<br ALIGN="LEFT"/>get_articles_info_for_cohort(cohort)<br ALIGN="LEFT"/>get_cohorts_for_article(article)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.cohort_rule.CohortRule" [color="black", fontcolor="black", label=<{CohortRule|cohort : Cohort<br ALIGN="LEFT"/>student1 : User<br ALIGN="LEFT"/>teacher : User<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_cohort.CohortTest" [color="black", fontcolor="black", label=<{CohortTest|cohort : Cohort<br ALIGN="LEFT"/>cohort_rule : CohortRule<br ALIGN="LEFT"/>student1 : User<br ALIGN="LEFT"/>user_t : User<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_all_cohorts()<br ALIGN="LEFT"/>test_cohort_still_has_capacity_false()<br ALIGN="LEFT"/>test_cohort_still_has_capacity_true()<br ALIGN="LEFT"/>test_is_teacher()<br ALIGN="LEFT"/>test_teacher_has_students()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.bookmark_context.ContextIdentifier" [color="black", fontcolor="black", label=<{ContextIdentifier|article_fragment_id : NoneType<br ALIGN="LEFT"/>article_id : NoneType<br ALIGN="LEFT"/>context_type : str<br ALIGN="LEFT"/>video_id : NoneType<br ALIGN="LEFT"/>|as_dictionary()<br ALIGN="LEFT"/>from_dictionary(dictionary)<br ALIGN="LEFT"/>from_json_string(json_string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.nlp_pipeline.reduce_context.ContextReducer" [color="black", fontcolor="black", label=<{ContextReducer|<br ALIGN="LEFT"/>|get_similar_sentences(nlp_pipe: SpacyWrapper, sentence: str, article: str, max_length: int)<br ALIGN="LEFT"/>reduce_context_for_bookmark(nlp_pipe: SpacyWrapper, sentence: str, bookmark: str, max_length: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.context_type.ContextType" [color="black", fontcolor="black", label=<{ContextType|ALL_TYPES : list<br ALIGN="LEFT"/>ARTICLE_FRAGMENT : str<br ALIGN="LEFT"/>ARTICLE_SUMMARY : str<br ALIGN="LEFT"/>ARTICLE_TITLE : str<br ALIGN="LEFT"/>ORPHAN_CONTEXT : str<br ALIGN="LEFT"/>USER_EDITED_TEXT : str<br ALIGN="LEFT"/>VIDEO_SUBTITLE : str<br ALIGN="LEFT"/>VIDEO_TITLE : str<br ALIGN="LEFT"/>WEB_FRAGMENT : str<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|find_by_id(context_type_id: int)<br ALIGN="LEFT"/>find_by_type(type: str)<br ALIGN="LEFT"/>find_or_create(session, type: str, commit)<br ALIGN="LEFT"/>get_table_corresponding_to_type(type: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.api.cross_domain_app.CrossDomainApp" [color="black", fontcolor="black", label=<{CrossDomainApp|<br ALIGN="LEFT"/>|handle_user_exception(e)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.api.utils.json_result.DateTimeEncoder" [color="black", fontcolor="black", label=<{DateTimeEncoder|<br ALIGN="LEFT"/>|default(o)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.strategies.default_difficulty_estimator.DefaultDifficultyEstimator" [color="black", fontcolor="black", label=<{DefaultDifficultyEstimator|<br ALIGN="LEFT"/>|estimate_difficulty(text: str, language: 'model.Language', user: 'model.User')<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.tests_difficulty_estimator_strategies.test_default_difficulty_estimator.DefaultDifficultyEstimatorTest" [color="black", fontcolor="black", label=<{DefaultDifficultyEstimatorTest|lan : Language<br ALIGN="LEFT"/>user : User<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_compute_complex_text_difficulty()<br ALIGN="LEFT"/>test_compute_simple_text_difficulty()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.difficulty_estimator_factory.DifficultyEstimatorFactory" [color="black", fontcolor="black", label=<{DifficultyEstimatorFactory|<br ALIGN="LEFT"/>|get_difficulty_estimator(estimator_name: str): Type[DifficultyEstimatorStrategy]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_difficulty_estimator_factory.DifficultyEstimatorFactoryTest" [color="black", fontcolor="black", label=<{DifficultyEstimatorFactoryTest|<br ALIGN="LEFT"/>|test_custom_names_flesch_kincaid_estimator()<br ALIGN="LEFT"/>test_ignore_capitalization()<br ALIGN="LEFT"/>test_returns_flesch_kincaid_estimator()<br ALIGN="LEFT"/>test_unknown_type_returns_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy" [color="black", fontcolor="black", label=<{DifficultyEstimatorStrategy|CUSTOM_NAMES : list<br ALIGN="LEFT"/>|<I>estimate_difficulty</I>(text: str, language: 'model.Language', user: 'model.User')<br ALIGN="LEFT"/>has_custom_name(estimator_name: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.difficulty_lingo_rank.DifficultyLingoRank" [color="black", fontcolor="black", label=<{DifficultyLingoRank|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>difficulty<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|value_for_article(article)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.domain_name.DomainName" [color="black", fontcolor="black", label=<{DomainName|domain_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|extract_domain_name(url)<br ALIGN="LEFT"/>find(domain_url)<br ALIGN="LEFT"/>find_or_create(session, url: str)<br ALIGN="LEFT"/>for_url_string(url_string)<br ALIGN="LEFT"/>get_domain(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_domain.DomainTest" [color="black", fontcolor="black", label=<{DomainTest|user : User<br ALIGN="LEFT"/>user_rule : UserRule<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_one_domain_multiple_urls()<br ALIGN="LEFT"/>test_url_domain()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.nlp_pipeline.alignment_errant.ERRANT_Alignment" [color="black", fontcolor="black", label=<{ERRANT_Alignment|align_seq : list<br ALIGN="LEFT"/>cor<br ALIGN="LEFT"/>cost_matrix<br ALIGN="LEFT"/>op_matrix<br ALIGN="LEFT"/>orig<br ALIGN="LEFT"/>|align(lev)<br ALIGN="LEFT"/>get_all_equal_edits()<br ALIGN="LEFT"/>get_all_merge_edits()<br ALIGN="LEFT"/>get_all_split_edits()<br ALIGN="LEFT"/>get_cheapest_align_seq()<br ALIGN="LEFT"/>get_sub_cost(o, c)<br ALIGN="LEFT"/>merge_edits(seq)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.nlp_pipeline.edit_errant.Edit" [color="black", fontcolor="black", label=<{Edit|c_end<br ALIGN="LEFT"/>c_start<br ALIGN="LEFT"/>c_str : str<br ALIGN="LEFT"/>c_toks<br ALIGN="LEFT"/>o_end<br ALIGN="LEFT"/>o_start<br ALIGN="LEFT"/>o_str : str<br ALIGN="LEFT"/>o_toks<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|minimise()<br ALIGN="LEFT"/>to_m2(id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.exercise.Exercise" [color="black", fontcolor="black", label=<{Exercise|feedback<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>outcome<br ALIGN="LEFT"/>outcome_id<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>session_id<br ALIGN="LEFT"/>solving_speed<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>source_id<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>|find(user_id)<br ALIGN="LEFT"/>get_bookmark()<br ALIGN="LEFT"/>get_user_id()<br ALIGN="LEFT"/>is_correct()<br ALIGN="LEFT"/>is_too_easy()<br ALIGN="LEFT"/>short_string_summary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.exercise_outcome.ExerciseOutcome" [color="black", fontcolor="black", label=<{ExerciseOutcome|ASKED_FOR_HINT : str<br ALIGN="LEFT"/>CORRECT : str<br ALIGN="LEFT"/>OTHER_FEEDBACK : str<br ALIGN="LEFT"/>RETRY : str<br ALIGN="LEFT"/>SHOW_SOLUTION : str<br ALIGN="LEFT"/>TOO_EASY : str<br ALIGN="LEFT"/>TYPO : str<br ALIGN="LEFT"/>WRONG : str<br ALIGN="LEFT"/>correct<br ALIGN="LEFT"/>correct_outcomes : list<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>outcome<br ALIGN="LEFT"/>too_easy_outcomes : list<br ALIGN="LEFT"/>wrong<br ALIGN="LEFT"/>wrong_outcomes : list<br ALIGN="LEFT"/>|find(outcome: str)<br ALIGN="LEFT"/>find_or_create(session, _outcome: str)<br ALIGN="LEFT"/>free_text_feedback()<br ALIGN="LEFT"/>is_correct(outcome: str)<br ALIGN="LEFT"/>is_valid_attempt(outcome: str)<br ALIGN="LEFT"/>too_easy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.exercise_rule.ExerciseRule" [color="black", fontcolor="black", label=<{ExerciseRule|exercise : Exercise<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.exercise_session_rule.ExerciseSessionRule" [color="black", fontcolor="black", label=<{ExerciseSessionRule|exerciseSession : UserExerciseSession<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.user_exercise_session_rule.ExerciseSessionRule" [color="black", fontcolor="black", label=<{ExerciseSessionRule|bookmark<br ALIGN="LEFT"/>exercise_session : UserExerciseSession<br ALIGN="LEFT"/>user : User<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.model.exercise_source.ExerciseSource" [color="black", fontcolor="black", label=<{ExerciseSource|TOP_BOOKMARKS_MINI_EXERCISE : str<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>|find(source)<br ALIGN="LEFT"/>find_or_create(session, _source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.content_retriever.crawler_exceptions.FailedToParseWithReadabilityServer" [color="black", fontcolor="red", label=<{FailedToParseWithReadabilityServer|reason<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.model.feed.Feed" [color="black", fontcolor="black", label=<{Feed|deactivated<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>feed_handler : NoneType<br ALIGN="LEFT"/>feed_type<br ALIGN="LEFT"/>icon_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>image_url<br ALIGN="LEFT"/>image_url_id<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>last_crawled_time<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>url_id<br ALIGN="LEFT"/>|as_dictionary()<br ALIGN="LEFT"/>exists(feed)<br ALIGN="LEFT"/>feed_health_info()<br ALIGN="LEFT"/>feed_items(last_retrieval_time_from_DB)<br ALIGN="LEFT"/>find_by_id(i)<br ALIGN="LEFT"/>find_by_url(url)<br ALIGN="LEFT"/>find_for_language_id(language_code)<br ALIGN="LEFT"/>find_or_create(session, url, title, description, icon_name, language: Language, feed_type)<br ALIGN="LEFT"/>from_url(url: str, feed_type: int)<br ALIGN="LEFT"/>get_articles(limit, after_date, most_recent_first, easiest_first)<br ALIGN="LEFT"/>initializeFeedHandler()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.feed_handler.feed_handler.FeedHandler" [color="black", fontcolor="black", label=<{FeedHandler|description : str<br ALIGN="LEFT"/>feed_type : int<br ALIGN="LEFT"/>image_url_string : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>url : str<br ALIGN="LEFT"/>|extract_feed_metadata(): None<br ALIGN="LEFT"/>get_feed_articles(): list[dict]<br ALIGN="LEFT"/>get_server_time(article_date): datetime<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.feed_rule.FeedRule" [color="black", fontcolor="black", label=<{FeedRule|fake_feed : Feed<br ALIGN="LEFT"/>feed : Feed<br ALIGN="LEFT"/>feed1 : Feed<br ALIGN="LEFT"/>feed_fr : Feed<br ALIGN="LEFT"/>feed_newspaper_da : Feed<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_feed.FeedTest" [color="black", fontcolor="black", label=<{FeedTest|crawl_report : CrawlReport<br ALIGN="LEFT"/>newspaper_da : Feed<br ALIGN="LEFT"/>spiegel : Feed<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_after_date_works()<br ALIGN="LEFT"/>test_article_ordering()<br ALIGN="LEFT"/>test_feed_items()<br ALIGN="LEFT"/>test_feed_newspaper()<br ALIGN="LEFT"/>test_feed_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.feedback_component.FeedbackComponent" [color="black", fontcolor="black", label=<{FeedbackComponent|component_type<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|as_dictionary()<br ALIGN="LEFT"/>find(component_type)<br ALIGN="LEFT"/>find_by_id(i)<br ALIGN="LEFT"/>find_or_create(session, component_type)<br ALIGN="LEFT"/>get_all_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.strategies.flesch_kincaid_difficulty_estimator.FleschKincaidDifficultyEstimator" [color="black", fontcolor="black", label=<{FleschKincaidDifficultyEstimator|AVERAGE_SYLLABLE_LENGTH : float<br ALIGN="LEFT"/>CUSTOM_NAMES : list<br ALIGN="LEFT"/>|discrete_difficulty(score: int)<br ALIGN="LEFT"/>discrete_difficulty_CEFR(score: int)<br ALIGN="LEFT"/>estimate_difficulty(text: str, language: 'Language', user: 'User')<br ALIGN="LEFT"/>estimate_number_of_syllables_in_word(word: str, language: 'Language')<br ALIGN="LEFT"/>estimate_number_of_syllables_in_word_pyphen(word: str, language: 'Language')<br ALIGN="LEFT"/>flesch_kincaid_readability_index(text: str, language: 'Language')<br ALIGN="LEFT"/>get_constants_for_language(language: 'language')<br ALIGN="LEFT"/>grade_difficulty(score: int)<br ALIGN="LEFT"/>normalize_difficulty(score: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.tests_difficulty_estimator_strategies.test_flesch_kincaid_difficulty_estimator.FleschKincaidReadingEaseDifficultyEstimatorTest" [color="black", fontcolor="black", label=<{FleschKincaidReadingEaseDifficultyEstimatorTest|user : User<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_danish()<br ALIGN="LEFT"/>test_discrete_50()<br ALIGN="LEFT"/>test_discrete_80()<br ALIGN="LEFT"/>test_discrete_above_80()<br ALIGN="LEFT"/>test_discrete_below_0()<br ALIGN="LEFT"/>test_discrete_below_50()<br ALIGN="LEFT"/>test_discrete_between_80_and_50()<br ALIGN="LEFT"/>test_english_constants()<br ALIGN="LEFT"/>test_english_easy()<br ALIGN="LEFT"/>test_english_hard()<br ALIGN="LEFT"/>test_english_medium()<br ALIGN="LEFT"/>test_german_constants()<br ALIGN="LEFT"/>test_german_easy()<br ALIGN="LEFT"/>test_german_hard()<br ALIGN="LEFT"/>test_german_medium()<br ALIGN="LEFT"/>test_normalized_0()<br ALIGN="LEFT"/>test_normalized_100()<br ALIGN="LEFT"/>test_normalized_above_100()<br ALIGN="LEFT"/>test_normalized_below_0()<br ALIGN="LEFT"/>test_normalized_between_100_and_0()<br ALIGN="LEFT"/>test_recognized_by_FK()<br ALIGN="LEFT"/>test_recognized_by_FKIndex()<br ALIGN="LEFT"/>test_recognized_by_flesch_kincaid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.word_scheduling.basicSR.four_levels_per_word.FourLevelsPerWord" [color="black", fontcolor="black", label=<{FourLevelsPerWord|DECREASE_COOLING_INTERVAL_ON_FAIL<br ALIGN="LEFT"/>MAX_INTERVAL : int<br ALIGN="LEFT"/>NEXT_COOLING_INTERVAL_ON_SUCCESS : dict<br ALIGN="LEFT"/>consecutive_correct_answers : int<br ALIGN="LEFT"/>cooling_interval : int<br ALIGN="LEFT"/>next_practice_time<br ALIGN="LEFT"/>|find_or_create(db_session, bookmark)<br ALIGN="LEFT"/>get_cooling_interval_dictionary()<br ALIGN="LEFT"/>get_learning_cycle_length()<br ALIGN="LEFT"/>get_max_interval(in_days: bool)<br ALIGN="LEFT"/>is_about_to_be_learned()<br ALIGN="LEFT"/>update_schedule(db_session, correctness, exercise_time: datetime)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.strategies.frequency_difficulty_estimator.FrequencyDifficultyEstimator" [color="black", fontcolor="black", label=<{FrequencyDifficultyEstimator|CUSTOM_NAMES : list<br ALIGN="LEFT"/>language : str<br ALIGN="LEFT"/>score_map : defaultdict<br ALIGN="LEFT"/>|discrete_text_difficulty(median_difficulty: float)<br ALIGN="LEFT"/>estimate_difficulty(text: str)<br ALIGN="LEFT"/>quadratic(language: 'model.Language')<br ALIGN="LEFT"/>word_difficulty(known_probabilities: dict, personalized: bool, w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.tests_difficulty_estimator_strategies.test_frequency_difficulty_estimator.FrequencyDifficultyEstimatorTest" [color="black", fontcolor="black", label=<{FrequencyDifficultyEstimatorTest|lan : Language<br ALIGN="LEFT"/>user : User<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_compute_very_simple_text_difficulty()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.api.utils.translator.GoogleTranslateWithContext" [color="black", fontcolor="black", label=<{GoogleTranslateWithContext|<br ALIGN="LEFT"/>|get_result(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.api.utils.translator.GoogleTranslateWithoutContext" [color="black", fontcolor="black", label=<{GoogleTranslateWithoutContext|<br ALIGN="LEFT"/>|get_result(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.util.encoding.JSONSerializable" [color="black", fontcolor="black", label=<{JSONSerializable|<br ALIGN="LEFT"/>|<I>serialize</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.language.Language" [color="black", fontcolor="black", label=<{Language|CODES_OF_LANGUAGES_AVAILABLE_AS_NATIVE : list<br ALIGN="LEFT"/>CODES_OF_LANGUAGES_THAT_CAN_BE_LEARNED : list<br ALIGN="LEFT"/>LANGUAGE_NAMES : dict<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|all()<br ALIGN="LEFT"/>all_reading_for_user(user)<br ALIGN="LEFT"/>as_dictionary()<br ALIGN="LEFT"/>available_languages()<br ALIGN="LEFT"/>default_learned()<br ALIGN="LEFT"/>default_native_language()<br ALIGN="LEFT"/>find(code)<br ALIGN="LEFT"/>find_by_id(i)<br ALIGN="LEFT"/>find_or_create(language_code)<br ALIGN="LEFT"/>get_articles(after_date, most_recent_first, easiest_first)<br ALIGN="LEFT"/>native_languages()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.language_rule.LanguageRule" [color="black", fontcolor="black", label=<{LanguageRule|da<br ALIGN="LEFT"/>de<br ALIGN="LEFT"/>en<br ALIGN="LEFT"/>es<br ALIGN="LEFT"/>fr<br ALIGN="LEFT"/>it<br ALIGN="LEFT"/>languages : dict<br ALIGN="LEFT"/>nl<br ALIGN="LEFT"/>no<br ALIGN="LEFT"/>pt<br ALIGN="LEFT"/>random<br ALIGN="LEFT"/>ro<br ALIGN="LEFT"/>|get_or_create_language(language_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_language.LanguageTest" [color="black", fontcolor="black", label=<{LanguageTest|user : User<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_all_languages()<br ALIGN="LEFT"/>test_languages_exists()<br ALIGN="LEFT"/>test_native_language()<br ALIGN="LEFT"/>test_user_set_language()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.learning_cycle.LearningCycle" [color="black", fontcolor="black", label=<{LearningCycle|NOT_SET : int<br ALIGN="LEFT"/>PRODUCTIVE : int<br ALIGN="LEFT"/>RECEPTIVE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_logging.LoggingTest" [color="black", fontcolor="black", label=<{LoggingTest|<br ALIGN="LEFT"/>|test_logging()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_broken_code_map.LowQualityTypes" [color="black", fontcolor="black", label=<{LowQualityTypes|HTML_PATTERN : str<br ALIGN="LEFT"/>INCOMPLETE_PATTERN : str<br ALIGN="LEFT"/>LANGUAGE_DOES_NOT_MATCH_FEED : str<br ALIGN="LEFT"/>LIVE_BLOG : str<br ALIGN="LEFT"/>ML_PREDICTION : str<br ALIGN="LEFT"/>TEXT_PAYWALL_PATTERN : str<br ALIGN="LEFT"/>TOO_SHORT : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.api.utils.translator.MicrosoftTranslateWithContext" [color="black", fontcolor="black", label=<{MicrosoftTranslateWithContext|<br ALIGN="LEFT"/>|get_result(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.api.utils.translator.MicrosoftTranslateWithoutContext" [color="black", fontcolor="black", label=<{MicrosoftTranslateWithoutContext|<br ALIGN="LEFT"/>|get_result(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.model_test_mixin.ModelTestMixIn" [color="black", fontcolor="black", label=<{ModelTestMixIn|app : Flask<br ALIGN="LEFT"/>faker : NoneType<br ALIGN="LEFT"/>|run(result)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.tokenization.nltk_tokenizer.NLTKTokenizer" [color="black", fontcolor="black", label=<{NLTKTokenizer|<br ALIGN="LEFT"/>|get_sentences(text: str)<br ALIGN="LEFT"/>is_language_supported(language: Language)<br ALIGN="LEFT"/>replace_email_url_with_placeholder(text: str)<br ALIGN="LEFT"/>text_preprocessing(text: str)<br ALIGN="LEFT"/>tokenize_text(text: str, as_serializable_dictionary: bool, flatten: bool, start_token_i: int, start_sentence_i: int, start_paragraph_i: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.new_text.NewText" [color="black", fontcolor="black", label=<{NewText|content<br ALIGN="LEFT"/>content_hash<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|find_by_id(text_id)<br ALIGN="LEFT"/>find_or_create(session, text, commit)<br ALIGN="LEFT"/>update_content(new_content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.feed_handler.newspaperfeed.NewspaperFeed" [color="black", fontcolor="black", label=<{NewspaperFeed|description<br ALIGN="LEFT"/>image_url_string<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>use_cache : bool<br ALIGN="LEFT"/>|extract_feed_metadata(): None<br ALIGN="LEFT"/>get_feed_articles(): list[dict]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.nlp_pipeline.confusion_generator.NoiseGenerator" [color="black", fontcolor="black", label=<{NoiseGenerator|language : str<br ALIGN="LEFT"/>lemma_set : set<br ALIGN="LEFT"/>noise_probabilities : dict<br ALIGN="LEFT"/>pos_confusion_set : NoneType<br ALIGN="LEFT"/>spacy_pipe<br ALIGN="LEFT"/>word_confusion_set : NoneType<br ALIGN="LEFT"/>|generate_confusion_words(sentence, number_of_words, student_words, verbose)<br ALIGN="LEFT"/>replace_sent_with_noise(sentence, number_of_mistakes, number_of_words, verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.notification.Notification" [color="black", fontcolor="black", label=<{Notification|DAILY_LOGIN : int<br ALIGN="LEFT"/>EXERCISE_AVAILABLE : int<br ALIGN="LEFT"/>NEW_ARTICLE_AVAILABLE : int<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|find(type)<br ALIGN="LEFT"/>find_by_id(i)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.outcome_rule.OutcomeRule" [color="black", fontcolor="black", label=<{OutcomeRule|correct<br ALIGN="LEFT"/>outcomes : list<br ALIGN="LEFT"/>random<br ALIGN="LEFT"/>retry<br ALIGN="LEFT"/>show_solution<br ALIGN="LEFT"/>too_easy<br ALIGN="LEFT"/>typo<br ALIGN="LEFT"/>wrong<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.model.personal_copy.PersonalCopy" [color="black", fontcolor="black", label=<{PersonalCopy|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for(user)<br ALIGN="LEFT"/>exists_for(user, article)<br ALIGN="LEFT"/>get_page_for(user, page)<br ALIGN="LEFT"/>make_for(user, article, session)<br ALIGN="LEFT"/>remove_for(user, article, session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.feed_handler.rssfeed.RSSFeed" [color="black", fontcolor="black", label=<{RSSFeed|description : str<br ALIGN="LEFT"/>image_url_string : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|extract_feed_metadata(): None<br ALIGN="LEFT"/>get_feed_articles(): list[dict]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.user_reading_session_rule.ReadingSessionRule" [color="black", fontcolor="black", label=<{ReadingSessionRule|w_session : UserReadingSession<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.scheduler_rule.SchedulerRule" [color="black", fontcolor="black", label=<{SchedulerRule|schedule<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_scheduling.SchedulerTest" [color="black", fontcolor="black", label=<{SchedulerTest|four_levels_user : User<br ALIGN="LEFT"/>two_cycles_bookmark1 : Bookmark, NoneType, bool<br ALIGN="LEFT"/>two_cycles_bookmark2 : Bookmark, NoneType, bool<br ALIGN="LEFT"/>two_cycles_user : User<br ALIGN="LEFT"/>user_rule_cycle : UserRule<br ALIGN="LEFT"/>user_rule_levels : UserRule<br ALIGN="LEFT"/>|assert_schedule(schedule, expected_cycle, expected_level, expected_cooling, expected_consecutive_corrects)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_learning_cycle_full_cycle()<br ALIGN="LEFT"/>test_learning_cycle_productive_doesnt_go_down_to_receptive()<br ALIGN="LEFT"/>test_learning_cycle_schedule_is_created()<br ALIGN="LEFT"/>test_learning_cycle_two_correct_exercises_in_a_day()<br ALIGN="LEFT"/>test_learning_cycle_wrong()<br ALIGN="LEFT"/>test_level_doesnt_go_back_to_lower_level()<br ALIGN="LEFT"/>test_level_full_cycle()<br ALIGN="LEFT"/>test_level_schedule_is_created()<br ALIGN="LEFT"/>test_level_two_correct_exercises_in_a_day()<br ALIGN="LEFT"/>test_level_wrong()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.search.Search" [color="black", fontcolor="black", label=<{Search|id<br ALIGN="LEFT"/>keywords<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>|all_articles()<br ALIGN="LEFT"/>as_dictionary()<br ALIGN="LEFT"/>find(keywords, language_id)<br ALIGN="LEFT"/>find_by_id(i)<br ALIGN="LEFT"/>find_or_create(session, keywords, language_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.search_filter.SearchFilter" [color="black", fontcolor="black", label=<{SearchFilter|id<br ALIGN="LEFT"/>search<br ALIGN="LEFT"/>search_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>find_or_create(session, user, search)<br ALIGN="LEFT"/>get_number_of_users_excluding(search_id)<br ALIGN="LEFT"/>with_search(search_id)<br ALIGN="LEFT"/>with_search_id(i, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.search_subscription.SearchSubscription" [color="black", fontcolor="black", label=<{SearchSubscription|id<br ALIGN="LEFT"/>receive_email<br ALIGN="LEFT"/>search<br ALIGN="LEFT"/>search_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>as_dictionary()<br ALIGN="LEFT"/>find_or_create(session, user, search, receive_email)<br ALIGN="LEFT"/>get_number_of_subscribers(search_id)<br ALIGN="LEFT"/>update_receive_email(session, user, search, receive_email)<br ALIGN="LEFT"/>with_search_id(i, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.session.Session" [color="black", fontcolor="black", label=<{Session|id<br ALIGN="LEFT"/>last_use<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>|create_for_user(user)<br ALIGN="LEFT"/>find(_uuid: str)<br ALIGN="LEFT"/>get_last_use_for_user(user_id)<br ALIGN="LEFT"/>update_use_date()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.content_retriever.crawler_exceptions.SkippedAlreadyInDB" [color="black", fontcolor="red", label=<{SkippedAlreadyInDB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.content_retriever.crawler_exceptions.SkippedForLowQuality" [color="black", fontcolor="red", label=<{SkippedForLowQuality|reason<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.content_retriever.crawler_exceptions.SkippedForTooOld" [color="black", fontcolor="red", label=<{SkippedForTooOld|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.model.sorted_exercise_log.SortedExerciseLog" [color="black", fontcolor="black", label=<{SortedExerciseLog|bookmark<br ALIGN="LEFT"/>exercises<br ALIGN="LEFT"/>learning_cycle_length<br ALIGN="LEFT"/>|compact_sorted_exercise_log()<br ALIGN="LEFT"/>exercise_streaks_of_given_length(): dict<br ALIGN="LEFT"/>is_empty()<br ALIGN="LEFT"/>last_exercise()<br ALIGN="LEFT"/>last_exercise_time()<br ALIGN="LEFT"/>latest_exercise_outcome()<br ALIGN="LEFT"/>most_recent_correct_dates()<br ALIGN="LEFT"/>most_recent_corrects()<br ALIGN="LEFT"/>str_most_recent_correct_dates()<br ALIGN="LEFT"/>summary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.source.Source" [color="black", fontcolor="black", label=<{Source|broken<br ALIGN="LEFT"/>fk_difficulty<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>source_text<br ALIGN="LEFT"/>source_text_id<br ALIGN="LEFT"/>source_type<br ALIGN="LEFT"/>source_type_id<br ALIGN="LEFT"/>word_count<br ALIGN="LEFT"/>|find_by_id(id: int)<br ALIGN="LEFT"/>find_or_create(session, text, source_type, language: Language, broken, commit)<br ALIGN="LEFT"/>get_content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.source_rule.SourceRule" [color="black", fontcolor="black", label=<{SourceRule|random<br ALIGN="LEFT"/>recognize<br ALIGN="LEFT"/>sources : list<br ALIGN="LEFT"/>translate<br ALIGN="LEFT"/>zeekoe<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.model.source_text.SourceText" [color="black", fontcolor="black", label=<{SourceText|content<br ALIGN="LEFT"/>content_hash<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|find_by_id(text_id)<br ALIGN="LEFT"/>find_or_create(session, text, commit)<br ALIGN="LEFT"/>update_content(new_content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.source_type.SourceType" [color="black", fontcolor="black", label=<{SourceType|ALL_TYPES : list<br ALIGN="LEFT"/>ARTICLE : str<br ALIGN="LEFT"/>VIDEO : str<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|find_by_id(source_type_id: int)<br ALIGN="LEFT"/>find_by_type(type: str)<br ALIGN="LEFT"/>find_or_create(session, type: str, commit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.nlp_pipeline.spacy_wrapper.SpacyWrapper" [color="black", fontcolor="black", label=<{SpacyWrapper|spacy_pipe<br ALIGN="LEFT"/>|get_doc(sentence)<br ALIGN="LEFT"/>get_sent_list(lines)<br ALIGN="LEFT"/>get_sent_similarity(sentence_a, sentence_b)<br ALIGN="LEFT"/>tokenize_sentence(sentence)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.tokenization.stanza_tokenizer.StanzaTokenizer" [color="black", fontcolor="black", label=<{StanzaTokenizer|CACHED_NLP_PIPELINES : dict<br ALIGN="LEFT"/>STANZA_MODELS : set<br ALIGN="LEFT"/>nlp_pipeline<br ALIGN="LEFT"/>|get_sentences(text: str)<br ALIGN="LEFT"/>is_language_supported(language: Language)<br ALIGN="LEFT"/>tokenize_text(text: str, as_serializable_dictionary: bool, flatten: bool, start_token_i: int, start_sentence_i: int, start_paragraph_i: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.starred_article.StarredArticle" [color="black", fontcolor="black", label=<{StarredArticle|id<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>starred_date<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>url_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>as_dict()<br ALIGN="LEFT"/>delete(session, user, _url)<br ALIGN="LEFT"/>find_or_create(session, user: User, _url, _title: str, _language)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.teacher.Teacher" [color="black", fontcolor="black", label=<{Teacher|id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|exists(user)<br ALIGN="LEFT"/>from_user(user)<br ALIGN="LEFT"/>get_cohorts()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.teacher_cohort_map.TeacherCohortMap" [color="black", fontcolor="black", label=<{TeacherCohortMap|cohort<br ALIGN="LEFT"/>cohort_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|find_or_create(user, cohort, session)<br ALIGN="LEFT"/>get_cohorts_for(user)<br ALIGN="LEFT"/>get_teachers_for(cohort)<br ALIGN="LEFT"/>is_teacher(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_retrieve_and_compute.TestRetrieveAndCompute" [color="black", fontcolor="black", label=<{TestRetrieveAndCompute|lan : Language<br ALIGN="LEFT"/>user : User<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_difficulty_of_feed_items()<br ALIGN="LEFT"/>test_download_with_topic()<br ALIGN="LEFT"/>test_fragment_removal()<br ALIGN="LEFT"/>test_le_monde_subscription()<br ALIGN="LEFT"/>test_ml_classification()<br ALIGN="LEFT"/>test_new_scientist_overlay()<br ALIGN="LEFT"/>test_sufficient_quality()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.text.Text" [color="black", fontcolor="black", label=<{Text|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>content<br ALIGN="LEFT"/>content_hash<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>in_content<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>left_ellipsis<br ALIGN="LEFT"/>paragraph_i<br ALIGN="LEFT"/>right_ellipsis<br ALIGN="LEFT"/>sentence_i<br ALIGN="LEFT"/>token_i<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>url_id<br ALIGN="LEFT"/>|all_bookmarks(user)<br ALIGN="LEFT"/>all_bookmarks_for_text()<br ALIGN="LEFT"/>find_all(text, language)<br ALIGN="LEFT"/>find_by_id(text_id)<br ALIGN="LEFT"/>find_or_create(session, text, language, url, article, paragraph_i, sentence_i, token_i, in_content, left_elipsis, right_elipsis)<br ALIGN="LEFT"/>get_content()<br ALIGN="LEFT"/>shorten_word_context(given_word, max_word_count)<br ALIGN="LEFT"/>update_content(new_content)<br ALIGN="LEFT"/>words()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.text_rule.TextRule" [color="black", fontcolor="black", label=<{TextRule|text : Text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_text.TextTest" [color="black", fontcolor="black", label=<{TextTest|bookmark_rule : BookmarkRule<br ALIGN="LEFT"/>text_rule : TextRule<br ALIGN="LEFT"/>user_rule : UserRule<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_user_word_count()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.tokenization.token.Token" [color="black", fontcolor="black", label=<{Token|EMAIL_REGEX<br ALIGN="LEFT"/>LEFT_PUNCTUATION : str<br ALIGN="LEFT"/>NUM_REGEX<br ALIGN="LEFT"/>PUNCTUATION : str<br ALIGN="LEFT"/>RIGHT_PUNCTUATION : str<br ALIGN="LEFT"/>SYMBOLS : str<br ALIGN="LEFT"/>URL_REGEX<br ALIGN="LEFT"/>has_space : NoneType<br ALIGN="LEFT"/>is_left_punct<br ALIGN="LEFT"/>is_like_email<br ALIGN="LEFT"/>is_like_num<br ALIGN="LEFT"/>is_like_url<br ALIGN="LEFT"/>is_punct<br ALIGN="LEFT"/>is_right_punct<br ALIGN="LEFT"/>is_sent_start<br ALIGN="LEFT"/>is_symbol<br ALIGN="LEFT"/>par_i : NoneType<br ALIGN="LEFT"/>pos : NoneType<br ALIGN="LEFT"/>sent_i : NoneType<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>token_i : NoneType<br ALIGN="LEFT"/>|as_serializable_dictionary()<br ALIGN="LEFT"/>is_like_email(text)<br ALIGN="LEFT"/>is_like_symbols(text)<br ALIGN="LEFT"/>is_like_url(text)<br ALIGN="LEFT"/>is_punctuation(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_tokenizer.TokenizationTest" [color="black", fontcolor="black", label=<{TokenizationTest|da_lang : Language<br ALIGN="LEFT"/>da_tokenizer : NLTKTokenizer, StanzaTokenizer<br ALIGN="LEFT"/>de_lang : Language<br ALIGN="LEFT"/>de_tokenizer : NLTKTokenizer, StanzaTokenizer<br ALIGN="LEFT"/>en_lang : Language<br ALIGN="LEFT"/>en_tokenizer : NLTKTokenizer, StanzaTokenizer<br ALIGN="LEFT"/>es_lang : Language<br ALIGN="LEFT"/>es_tokenizer : NLTKTokenizer, StanzaTokenizer<br ALIGN="LEFT"/>fr_lang : Language<br ALIGN="LEFT"/>fr_tokenizer : NLTKTokenizer, StanzaTokenizer<br ALIGN="LEFT"/>it_lang : Language<br ALIGN="LEFT"/>it_tokenizer : NLTKTokenizer, StanzaTokenizer<br ALIGN="LEFT"/>pt_lang : Language<br ALIGN="LEFT"/>pt_tokenizer : NLTKTokenizer, StanzaTokenizer<br ALIGN="LEFT"/>tokenizer_model : STANZA_TOKEN_ONLY<br ALIGN="LEFT"/>|assert_sentence_i_token_i_is_correct(token_list, sent_i)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_danish_tokenization_1()<br ALIGN="LEFT"/>test_danish_tokenization_2()<br ALIGN="LEFT"/>test_danish_tokenization_3()<br ALIGN="LEFT"/>test_email_detection()<br ALIGN="LEFT"/>test_english_sentence_1()<br ALIGN="LEFT"/>test_english_sentence_2()<br ALIGN="LEFT"/>test_english_sentence_3()<br ALIGN="LEFT"/>test_english_sentence_4()<br ALIGN="LEFT"/>test_french_tokenization_1()<br ALIGN="LEFT"/>test_french_tokenization_2()<br ALIGN="LEFT"/>test_german_tokenization_1()<br ALIGN="LEFT"/>test_italian_tokenization_1()<br ALIGN="LEFT"/>test_number_detection()<br ALIGN="LEFT"/>test_portuguese_tokenization_1()<br ALIGN="LEFT"/>test_spanish_tokenization_1()<br ALIGN="LEFT"/>test_spanish_tokenization_2()<br ALIGN="LEFT"/>test_url_detection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.tokenization.zeeguu_tokenizer.TokenizerModel" [color="black", fontcolor="black", label=<{TokenizerModel|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.model.topic.Topic" [color="black", fontcolor="black", label=<{Topic|articles<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>language_topic_available_cache : dict<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|all_articles(limit)<br ALIGN="LEFT"/>as_dictionary()<br ALIGN="LEFT"/>clear_all_articles_cache()<br ALIGN="LEFT"/>find(name: str)<br ALIGN="LEFT"/>find_by_id(i)<br ALIGN="LEFT"/>get_all_topics(language: Language)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.topic_filter.TopicFilter" [color="black", fontcolor="black", label=<{TopicFilter|id<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>topic_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>all_for_user_as_list(user)<br ALIGN="LEFT"/>find_or_create(session, user, topic)<br ALIGN="LEFT"/>with_id(i)<br ALIGN="LEFT"/>with_topic_id(i, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.article_topic_map.TopicOriginType" [color="black", fontcolor="black", label=<{TopicOriginType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.topic_rule.TopicRule" [color="black", fontcolor="black", label=<{TopicRule|random<br ALIGN="LEFT"/>topics : dict<br ALIGN="LEFT"/>|get_or_create_topic(topic_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.topic_subscription.TopicSubscription" [color="black", fontcolor="black", label=<{TopicSubscription|id<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>topic_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>all_for_user_as_list(user)<br ALIGN="LEFT"/>find_or_create(session, user, topic)<br ALIGN="LEFT"/>with_id(i)<br ALIGN="LEFT"/>with_topic_id(i, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.word_scheduling.basicSR.two_learning_cycles_per_word.TwoLearningCyclesPerWord" [color="black", fontcolor="black", label=<{TwoLearningCyclesPerWord|DECREASE_COOLING_INTERVAL_ON_FAIL<br ALIGN="LEFT"/>MAX_INTERVAL : int<br ALIGN="LEFT"/>NEXT_COOLING_INTERVAL_ON_SUCCESS : dict<br ALIGN="LEFT"/>consecutive_correct_answers : int<br ALIGN="LEFT"/>cooling_interval : NoneType, int<br ALIGN="LEFT"/>next_practice_time<br ALIGN="LEFT"/>|find_or_create(db_session, bookmark)<br ALIGN="LEFT"/>get_cooling_interval_dictionary()<br ALIGN="LEFT"/>get_learning_cycle_length()<br ALIGN="LEFT"/>get_max_interval(in_days: bool)<br ALIGN="LEFT"/>is_about_to_be_learned()<br ALIGN="LEFT"/>is_last_cycle()<br ALIGN="LEFT"/>is_last_exercise_in_cycle()<br ALIGN="LEFT"/>update_schedule(db_session, correctness, exercise_time: datetime)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.unique_code.UniqueCode" [color="black", fontcolor="black", label=<{UniqueCode|code<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>|all_codes_for(email)<br ALIGN="LEFT"/>last_code(email)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.url.Url" [color="black", fontcolor="black", label=<{Url|domain<br ALIGN="LEFT"/>domain_name_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|as_canonical_string()<br ALIGN="LEFT"/>as_string()<br ALIGN="LEFT"/>domain_name()<br ALIGN="LEFT"/>extract_canonical_url(url: str)<br ALIGN="LEFT"/>find(url, title)<br ALIGN="LEFT"/>find_or_create(session: 'Session', _url: str, title: str)<br ALIGN="LEFT"/>get_domain(url)<br ALIGN="LEFT"/>get_path(url: str)<br ALIGN="LEFT"/>render_link(link_text)<br ALIGN="LEFT"/>title_if_available()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.url_keyword.UrlKeyword" [color="black", fontcolor="black", label=<{UrlKeyword|EXCLUDE_TOPICS : set<br ALIGN="LEFT"/>articles<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>keyword<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>topic_id<br ALIGN="LEFT"/>|find_all_by_keyword(keyword)<br ALIGN="LEFT"/>find_first_by_keyword(keyword)<br ALIGN="LEFT"/>find_or_create(session, keyword, language: Language, topic: Topic)<br ALIGN="LEFT"/>get_keyword()<br ALIGN="LEFT"/>get_url_keywords_from_url(url: Url)<br ALIGN="LEFT"/>is_non_word(word: str): bool<br ALIGN="LEFT"/>topic_filter(topic: str): bool<br ALIGN="LEFT"/>with_id(i)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_url_keywords.UrlKeywordsTest" [color="black", fontcolor="black", label=<{UrlKeywordsTest|<br ALIGN="LEFT"/>|test_url_keywords_from_url_1()<br ALIGN="LEFT"/>test_url_keywords_from_url_2()<br ALIGN="LEFT"/>test_url_keywords_from_url_3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.url_rule.UrlRule" [color="black", fontcolor="black", label=<{UrlRule|url : NoneType, Url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_url.UrlTest" [color="black", fontcolor="black", label=<{UrlTest|url_rule : UrlRule<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_domain_plus_path_must_be_unique()<br ALIGN="LEFT"/>test_find_or_create_works()<br ALIGN="LEFT"/>test_try_to_get_race_condition()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user.User" [color="black", fontcolor="black", label=<{User|ANONYMOUS_EMAIL_DOMAIN : str<br ALIGN="LEFT"/>EMAIL_VALIDATION_REGEX : str<br ALIGN="LEFT"/>cohorts<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>invitation_code<br ALIGN="LEFT"/>is_dev<br ALIGN="LEFT"/>learned_language<br ALIGN="LEFT"/>learned_language_id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>native_language<br ALIGN="LEFT"/>native_language_id<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>password_salt<br ALIGN="LEFT"/>|active_during_recent(days: int)<br ALIGN="LEFT"/>add_user_to_cohort(cohort, session)<br ALIGN="LEFT"/>all_bookmarks(after_date, before_date, language_id)<br ALIGN="LEFT"/>all_bookmarks_fit_for_study()<br ALIGN="LEFT"/>all_reading_sessions(after_date, before_date, language_id)<br ALIGN="LEFT"/>all_recent_user_ids(days)<br ALIGN="LEFT"/>authorize(email, password)<br ALIGN="LEFT"/>authorize_anonymous(uuid, password)<br ALIGN="LEFT"/>bookmark_count()<br ALIGN="LEFT"/>bookmark_counts_by_date()<br ALIGN="LEFT"/>bookmarks_by_date(after_date)<br ALIGN="LEFT"/>bookmarks_by_day(after_date, max, with_title, with_context, language_id)<br ALIGN="LEFT"/>bookmarks_by_url_by_date(n_days)<br ALIGN="LEFT"/>bookmarks_chronologically()<br ALIGN="LEFT"/>bookmarks_for_article(article_id, with_exercise_info, with_title, with_tokens, good_for_study, json)<br ALIGN="LEFT"/>bookmarks_in_pipeline()<br ALIGN="LEFT"/>bookmarks_to_learn_not_in_pipeline()<br ALIGN="LEFT"/>bookmarks_to_study(bookmark_count, scheduled_only)<br ALIGN="LEFT"/>cohort_articles_for_user()<br ALIGN="LEFT"/>create_anonymous(uuid, password, learned_language_code, native_language_code)<br ALIGN="LEFT"/>create_default_user_preference()<br ALIGN="LEFT"/>date_of_last_bookmark()<br ALIGN="LEFT"/>details_as_dictionary()<br ALIGN="LEFT"/>email_exists(email)<br ALIGN="LEFT"/>exists(user)<br ALIGN="LEFT"/>find(email)<br ALIGN="LEFT"/>find_all()<br ALIGN="LEFT"/>find_by_id(id)<br ALIGN="LEFT"/>get_new_bookmarks_to_study(bookmarks_count)<br ALIGN="LEFT"/>has_bookmarks()<br ALIGN="LEFT"/>has_feature(feature_name)<br ALIGN="LEFT"/>isTeacher()<br ALIGN="LEFT"/>is_member_of_cohort(cohort_id)<br ALIGN="LEFT"/>learned_bookmarks(count)<br ALIGN="LEFT"/>learner_stats_data()<br ALIGN="LEFT"/>levels_for(language: Language)<br ALIGN="LEFT"/>liked_articles()<br ALIGN="LEFT"/>preferred_difficulty_estimator()<br ALIGN="LEFT"/>reading_sessions_by_day(after_date, max, language_id)<br ALIGN="LEFT"/>remove_from_cohort(cohort_id, session)<br ALIGN="LEFT"/>scheduled_bookmarks(bookmark_count)<br ALIGN="LEFT"/>set_learned_language(language_code: str, cefr_level: int, session)<br ALIGN="LEFT"/>set_learned_language_level(language_code: str, cefr_level: str, session)<br ALIGN="LEFT"/>set_native_language(code)<br ALIGN="LEFT"/>starred_bookmarks(count)<br ALIGN="LEFT"/>text_difficulty(text, language)<br ALIGN="LEFT"/>total_bookmarks_in_pipeline()<br ALIGN="LEFT"/>total_exercises_completed_today()<br ALIGN="LEFT"/>total_learned_bookmarks()<br ALIGN="LEFT"/>update_password(password: str)<br ALIGN="LEFT"/>user_words()<br ALIGN="LEFT"/>validate_email(col, email)<br ALIGN="LEFT"/>validate_name(col, name)<br ALIGN="LEFT"/>validate_password(col, password)<br ALIGN="LEFT"/>word_count()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_activitiy_data.UserActivityData" [color="black", fontcolor="black", label=<{UserActivityData|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>extra_data<br ALIGN="LEFT"/>has_article_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|create_from_post_data(session, data, user)<br ALIGN="LEFT"/>data_as_dictionary()<br ALIGN="LEFT"/>find(user: User, article: Article, extra_filter: str, extra_value: str, event_filter: str, only_latest, article_id: int)<br ALIGN="LEFT"/>find_or_create(session, user, time, event, value, extra_data, has_article_id, article_id)<br ALIGN="LEFT"/>find_url_in_extra_data()<br ALIGN="LEFT"/>get_article_id(db_session)<br ALIGN="LEFT"/>get_last_activity_timestamp(user_id)<br ALIGN="LEFT"/>get_reading_completion_for_article(article_id, user_id, number_of_activity_rows, threshold_for_read)<br ALIGN="LEFT"/>get_scroll_events_for_user_in_date_range(user, days_range, limit)<br ALIGN="LEFT"/>is_feedback()<br ALIGN="LEFT"/>is_like()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_article.UserArticle" [color="black", fontcolor="black", label=<{UserArticle|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>liked<br ALIGN="LEFT"/>opened<br ALIGN="LEFT"/>starred<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_liked_articles_of_user(user)<br ALIGN="LEFT"/>all_liked_articles_of_user_by_id(user_id)<br ALIGN="LEFT"/>all_starred_and_liked_articles_of_user_info(user)<br ALIGN="LEFT"/>all_starred_articles_of_user(user)<br ALIGN="LEFT"/>all_starred_articles_of_user_info(user)<br ALIGN="LEFT"/>all_starred_or_liked_articles_of_user(user, limit)<br ALIGN="LEFT"/>exists(obj)<br ALIGN="LEFT"/>find(user: User, article: Article)<br ALIGN="LEFT"/>find_by_article(article: Article)<br ALIGN="LEFT"/>find_or_create(session, user: User, article: Article, opened, liked, starred)<br ALIGN="LEFT"/>last_interaction()<br ALIGN="LEFT"/>set_liked(new_state)<br ALIGN="LEFT"/>set_opened(state)<br ALIGN="LEFT"/>set_starred(state)<br ALIGN="LEFT"/>user_article_info(user: User, article: Article, with_content, with_translations)<br ALIGN="LEFT"/>user_info_as_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.user_article_rule.UserArticleRule" [color="black", fontcolor="black", label=<{UserArticleRule|user_article : UserArticle<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_user_article.UserArticleTest" [color="black", fontcolor="black", label=<{UserArticleTest|article<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_article : UserArticle<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_all_starred_articles()<br ALIGN="LEFT"/>test_all_starred_or_liked_articles()<br ALIGN="LEFT"/>test_article_is_not_starred_initially()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_cohort_map.UserCohortMap" [color="black", fontcolor="black", label=<{UserCohortMap|cohort<br ALIGN="LEFT"/>cohort_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_exercise_session.UserExerciseSession" [color="black", fontcolor="black", label=<{UserExerciseSession|duration<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>last_action_time<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|exercises_in_session_string()<br ALIGN="LEFT"/>find_by_cohort(cohort_id, from_date: str, to_date: str)<br ALIGN="LEFT"/>find_by_id(id)<br ALIGN="LEFT"/>find_by_user_id(user_id, from_date: str, to_date: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_feedback.UserFeedback" [color="black", fontcolor="black", label=<{UserFeedback|feedback_component<br ALIGN="LEFT"/>feedback_component_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>report_time<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>url_id<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>create(session, user: User, feedback_component: FeedbackComponent, message: str, url: Url)<br ALIGN="LEFT"/>with_feedback_component_id(feedback_component_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_language.UserLanguage" [color="black", fontcolor="black", label=<{UserLanguage|cefr_level<br ALIGN="LEFT"/>declared_level_max<br ALIGN="LEFT"/>declared_level_min<br ALIGN="LEFT"/>doing_exercises<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>inferred_level_max<br ALIGN="LEFT"/>inferred_level_min<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>reading_news<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|all_for_user(user)<br ALIGN="LEFT"/>find_or_create(session, user, language)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>with_language_id(i, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_notification.UserNotification" [color="black", fontcolor="black", label=<{UserNotification|id<br ALIGN="LEFT"/>notification_click_time<br ALIGN="LEFT"/>notification_date<br ALIGN="LEFT"/>notification_id<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|create_user_notification(user_id, notification_id, db_session)<br ALIGN="LEFT"/>find_by_id(i)<br ALIGN="LEFT"/>get_all_notifications_for_user(user_id)<br ALIGN="LEFT"/>update_user_notification_time(user_notification_id, db_session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_preference.UserPreference" [color="black", fontcolor="black", label=<{UserPreference|AUDIO_EXERCISES : str<br ALIGN="LEFT"/>DIFFICULTY_ESTIMATOR : str<br ALIGN="LEFT"/>PRODUCTIVE_EXERCISES : str<br ALIGN="LEFT"/>PRONOUNCE_IN_READER : str<br ALIGN="LEFT"/>TRANSLATE_IN_READER : str<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|all_for_user(user: User)<br ALIGN="LEFT"/>find(user: User, key: str)<br ALIGN="LEFT"/>find_or_create(session, user: User, key: str, value: str)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_difficulty_estimator(user: User)<br ALIGN="LEFT"/>get_productive_exercises_setting(user: User)<br ALIGN="LEFT"/>is_productive_exercises_preference_enabled(user: User)<br ALIGN="LEFT"/>set(value: str)<br ALIGN="LEFT"/>set_difficulty_estimator(session, user: User, key: value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_user_preferences.UserPreferenceTest" [color="black", fontcolor="black", label=<{UserPreferenceTest|english : Language<br ALIGN="LEFT"/>random_origin_language : Language<br ALIGN="LEFT"/>random_origin_word<br ALIGN="LEFT"/>text : str<br ALIGN="LEFT"/>user : User<br ALIGN="LEFT"/>user_rule : UserRule<br ALIGN="LEFT"/>user_word_rule : UserWordRule<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_no_preference_at_first()<br ALIGN="LEFT"/>test_setting_preference()<br ALIGN="LEFT"/>test_text_difficulty_with_preference()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_reading_session.UserReadingSession" [color="black", fontcolor="black", label=<{UserReadingSession|article<br ALIGN="LEFT"/>article_id<br ALIGN="LEFT"/>duration<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>last_action_time<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|events_in_this_session()<br ALIGN="LEFT"/>find_by_article(article, from_date: str, to_date: str, is_active: bool, cohort: bool)<br ALIGN="LEFT"/>find_by_cohort(cohort, from_date: str, to_date: str, is_active: bool)<br ALIGN="LEFT"/>find_by_id(session_id)<br ALIGN="LEFT"/>find_by_user(user_id, from_date: str, to_date: str, is_active: bool)<br ALIGN="LEFT"/>find_by_user_and_article(user, article)<br ALIGN="LEFT"/>get_reading_session_timeout()<br ALIGN="LEFT"/>get_total_reading_for_user_article(article, user)<br ALIGN="LEFT"/>human_readable_date()<br ALIGN="LEFT"/>human_readable_duration()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.user_rule.UserRule" [color="black", fontcolor="black", label=<{UserRule|user : User<br ALIGN="LEFT"/>|add_bookmarks(bookmark_count, exercises_count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_user.UserTest" [color="black", fontcolor="black", label=<{UserTest|user : User<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_active_during_recent()<br ALIGN="LEFT"/>test_all_bookmarks()<br ALIGN="LEFT"/>test_authorize()<br ALIGN="LEFT"/>test_authorize_anonymous()<br ALIGN="LEFT"/>test_bookmark_counts_by_date()<br ALIGN="LEFT"/>test_bookmarks_by_date()<br ALIGN="LEFT"/>test_bookmarks_chronologically()<br ALIGN="LEFT"/>test_create_anonymous()<br ALIGN="LEFT"/>test_date_of_last_bookmark()<br ALIGN="LEFT"/>test_exists()<br ALIGN="LEFT"/>test_update_password()<br ALIGN="LEFT"/>test_user_deletion()<br ALIGN="LEFT"/>test_validate_email()<br ALIGN="LEFT"/>test_validate_name()<br ALIGN="LEFT"/>test_validate_password()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.user_word.UserWord" [color="black", fontcolor="black", label=<{UserWord|IMPORTANCE_LEVEL_STEP : int<br ALIGN="LEFT"/>IMPOSSIBLE_IMPORTANCE_LEVEL : float<br ALIGN="LEFT"/>IMPOSSIBLE_RANK : int<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>rank<br ALIGN="LEFT"/>word<br ALIGN="LEFT"/>|exists(word, language)<br ALIGN="LEFT"/>find(_word: str, language: Language)<br ALIGN="LEFT"/>find_all()<br ALIGN="LEFT"/>find_or_create(session, _word: str, language: Language)<br ALIGN="LEFT"/>importance_level()<br ALIGN="LEFT"/>importance_level_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.bookmark_user_preference.UserWordExPreference" [color="black", fontcolor="black", label=<{UserWordExPreference|DONT_USE_IN_EXERCISES : int<br ALIGN="LEFT"/>NO_PREFERENCE : int<br ALIGN="LEFT"/>USE_IN_EXERCISES : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.rules.user_word_rule.UserWordRule" [color="black", fontcolor="black", label=<{UserWordRule|user_word : UserWord<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"api.zeeguu.core.test.test_user_word.UserWordTest" [color="black", fontcolor="black", label=<{UserWordTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_exists()<br ALIGN="LEFT"/>test_find()<br ALIGN="LEFT"/>test_find_all()<br ALIGN="LEFT"/>test_find_or_create()<br ALIGN="LEFT"/>test_importance_level()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.video_title_context.VideoTitleContext" [color="black", fontcolor="black", label=<{VideoTitleContext|context<br ALIGN="LEFT"/>context_id<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>video<br ALIGN="LEFT"/>video_id<br ALIGN="LEFT"/>|find_by_context_id(context_id: int)<br ALIGN="LEFT"/>find_or_create(session, context, video, commit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.strategies.word_history_difficulty_estimator.WordHistoryDifficultyEstimator" [color="black", fontcolor="black", label=<{WordHistoryDifficultyEstimator|CUSTOM_NAMES : list<br ALIGN="LEFT"/>language : str<br ALIGN="LEFT"/>score_map : dict<br ALIGN="LEFT"/>user : str<br ALIGN="LEFT"/>|difficulty(language: 'model.Language', user: 'model.User', mode)<br ALIGN="LEFT"/>difficulty_until_timestamp(language: 'model.Language', user: 'model.User', max_timestamp, mode, scaling, scaling2)<br ALIGN="LEFT"/>discrete_text_difficulty(median_difficulty: float)<br ALIGN="LEFT"/>estimate_difficulty(text: str)<br ALIGN="LEFT"/>recurrence(language: 'model.Language', user: 'model.User')<br ALIGN="LEFT"/>recurrence_until_timestamp(language: 'model.Language', user: 'model.User', max_timestamp)<br ALIGN="LEFT"/>word_difficulty(known_probabilities: dict, personalized: bool, word: Word)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.language.strategies.word_rank_difficulty_estimator.WordRankDifficultyEstimator" [color="black", fontcolor="black", label=<{WordRankDifficultyEstimator|CUSTOM_NAMES : list<br ALIGN="LEFT"/>|discrete_difficulty(score: int)<br ALIGN="LEFT"/>estimate_difficulty(text: str, language: 'model.Language', user: 'model.User')<br ALIGN="LEFT"/>get_constants_for_language(language: 'model.language')<br ALIGN="LEFT"/>normalize_difficulty(score: int)<br ALIGN="LEFT"/>word_rank_readability_score(text: str, language: 'model.Language')<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.model.word_to_study.WordToStudy" [color="black", fontcolor="black", label=<{WordToStudy|bookmark<br ALIGN="LEFT"/>bookmark_id<br ALIGN="LEFT"/>consecutiveCorrects<br ALIGN="LEFT"/>coolingInterval<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>language_id<br ALIGN="LEFT"/>nextDueDate<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>user_id<br ALIGN="LEFT"/>|find(bookmark)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.api.utils.translator.WordnikTranslate" [color="black", fontcolor="black", label=<{WordnikTranslate|<br ALIGN="LEFT"/>|get_result(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.emailer.zeeguu_mailer.ZeeguuMailer" [color="black", fontcolor="black", label=<{ZeeguuMailer|message_body<br ALIGN="LEFT"/>message_subject<br ALIGN="LEFT"/>our_email<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>to_email<br ALIGN="LEFT"/>|notify_audio_experiment(data, user)<br ALIGN="LEFT"/>send()<br ALIGN="LEFT"/>send_content_retrieved_notification(article, old_content)<br ALIGN="LEFT"/>send_feedback(subject, context, message, user)<br ALIGN="LEFT"/>send_mail(subject, content_lines)<br ALIGN="LEFT"/>send_with_yagmail()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.tokenization.zeeguu_tokenizer.ZeeguuTokenizer" [color="black", fontcolor="black", label=<{ZeeguuTokenizer|language : Language<br ALIGN="LEFT"/>model_type<br ALIGN="LEFT"/>|<I>get_sentences</I>(text: str)<br ALIGN="LEFT"/><I>is_language_supported</I>(language: Language)<br ALIGN="LEFT"/><I>sentencizer</I>(text: str)<br ALIGN="LEFT"/>split_into_paragraphs(text)<br ALIGN="LEFT"/><I>tokenize_text</I>(text: str, as_serializable_dictionary, flatten, start_token_i: int, start_sentence_i: int, start_paragraph_i: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"api.zeeguu.core.feed_handler.newspaperfeed.NewspaperFeed" -> "api.zeeguu.core.feed_handler.feed_handler.FeedHandler" [arrowhead="empty", arrowtail="none"];
"api.zeeguu.core.feed_handler.rssfeed.RSSFeed" -> "api.zeeguu.core.feed_handler.feed_handler.FeedHandler" [arrowhead="empty", arrowtail="none"];
"api.zeeguu.core.word_scheduling.basicSR.four_levels_per_word.FourLevelsPerWord" -> "api.zeeguu.core.word_scheduling.basicSR.basicSR.BasicSRSchedule" [arrowhead="empty", arrowtail="none"];
"api.zeeguu.core.word_scheduling.basicSR.two_learning_cycles_per_word.TwoLearningCyclesPerWord" -> "api.zeeguu.core.word_scheduling.basicSR.basicSR.BasicSRSchedule" [arrowhead="empty", arrowtail="none"];
"api.zeeguu.core.model.article_broken_code_map.LowQualityTypes" -> "api.zeeguu.core.model.article_broken_code_map.ArticleBrokenMap" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="broken_code", style="solid"];
"api.zeeguu.core.tokenization.zeeguu_tokenizer.TokenizerModel" -> "api.zeeguu.core.tokenization.zeeguu_tokenizer.ZeeguuTokenizer" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="model_type", style="solid"];
}
